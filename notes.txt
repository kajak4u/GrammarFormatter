
syntax 				= syntax rule, {syntax rule};
syntax rule			= meta identifier, ’=’, definitions list, ’;’
definitions list	= single definition, {’|’, single definition}
single definition 	= term, {’,’, term}
term 				= factor, [’-’, exception]
exception 			= factor
factor			 	= [integer, ’*’], primary
primary				= optional sequence
						| repeated sequence
						| special sequence 
						| grouped sequence
						| meta identifier 
						| terminal string 
						| empty;
empty 	= ;
optional sequence 	= ’[’, definitions list, ’]’
repeated sequence 	= ’{’, definitions list, ’}’
grouped sequence 	= ’(’, definitions list, ’)’
terminal string		=	  "’", character - "’", {character - "’"}, "’"
						| ’"’, character - ’"’, {character - ’"’}, ’"’
meta identifier		= letter, {letter | decimal digit}
integer 			= decimal digit, {decimal digit};
special sequence 	= ’?’, {character - ’?’}, ’?’
comment				= ’(*’, {comment symbol}, ’*)’
comment symbol		= comment 
						| terminal string 
						| special sequence
						| character;
						
						
CSyntax
	vector<CSyntaxRule>

CSyntaxRule
	identifier
	CDefinitionList
	
CDefinitionList
	vector<CDefinition>
	
CDefinition
	vector<CTerm>
	
CTerm
	CFactor factor
	CFactor exception
	
CFactor
	multiplier
	CPrimary
	
CPrimary
	derived:
		COptional |	CRepeated | CGrouped | CSpecial => CGroup
		CMetaIdentifier
		CTerminal
		empty?
	
CGrouped
	CDefinitionList

CTerminal
	content

CMetaIdentifier
	id


fajna wersja:
CSyntax
	vector<CSyntaxRule>

CSyntaxRule
	CMetaIdentifier
	CDefinitionList

CDefinitionList
	vector<CDefinition>

CDefinition
	CTerminal | CMetaIdentifier